import os
from pathlib import Path
import xarray as xr
from cftime import num2date
import pandas as pd
import numpy as np
import geopandas as gpd
import numpy as onp
from matplotlib.patches import Patch
import matplotlib as mpl
from mpl_toolkits.axes_grid1.axes_divider import make_axes_locatable
import seaborn as sns
import pickle

mpl.use("agg")
import matplotlib.pyplot as plt  # noqa: E402

# mpl.rcParams["font.size"] = 8
# mpl.rcParams["axes.titlesize"] = 8
# mpl.rcParams["axes.labelsize"] = 9
# mpl.rcParams["xtick.labelsize"] = 8
# mpl.rcParams["ytick.labelsize"] = 8
# mpl.rcParams["legend.fontsize"] = 8
# mpl.rcParams["legend.title_fontsize"] = 9

mpl.rcParams["font.size"] = 10
mpl.rcParams["axes.titlesize"] = 10
mpl.rcParams["axes.labelsize"] = 11
mpl.rcParams["xtick.labelsize"] = 10
mpl.rcParams["ytick.labelsize"] = 10
mpl.rcParams["legend.fontsize"] = 10
mpl.rcParams["legend.title_fontsize"] = 11
sns.set_style("ticks")
# sns.plotting_context(
#     "paper",
#     font_scale=1,
#     rc={
#         "font.size": 8.0,
#         "axes.labelsize": 9.0,
#         "axes.titlesize": 8.0,
#         "xtick.labelsize": 8.0,
#         "ytick.labelsize": 8.0,
#         "legend.fontsize": 8.0,
#         "legend.title_fontsize": 9.0,
#     },
# )

sns.plotting_context(
    "paper",
    font_scale=1,
    rc={
        "font.size": 10.0,
        "axes.labelsize": 11.0,
        "axes.titlesize": 10.0,
        "xtick.labelsize": 9.0,
        "ytick.labelsize": 9.0,
        "legend.fontsize": 9.0,
        "legend.title_fontsize": 10.0,
    },
)


def nanmeanweighted(y, w, axis=None):
    w1 = w / onp.nansum(w, axis=axis)
    w2 = onp.where(onp.isnan(w), 0, w1)
    w3 = onp.where(onp.isnan(y), 0, w2)
    y1 = onp.where(onp.isnan(y), 0, y)
    wavg = onp.sum(y1 * w3, axis=axis) / onp.sum(w3, axis=axis)

    return wavg

def repeat_by_areashare(values, area_share):
    ll = [np.repeat(val, int(np.round(area_share[i], 0)))for i, val in enumerate(values)]
    return np.concatenate(ll)


base_path = Path(__file__).parent
# directory of results
base_path_output = Path("/Volumes/LaCie/roger/examples/plot_scale/boadkh") / "output"
if not os.path.exists(base_path_output):
    os.mkdir(base_path_output)
# directory of figures
base_path_figs = base_path / "figures"
if not os.path.exists(base_path_figs):
    os.mkdir(base_path_figs)

# identifiers for crop rotation scenarios
_dict_ffid = {"winter-wheat_clover": "1_0",
              "winter-wheat_silage-corn": "2_0",
              "summer-wheat_winter-wheat": "3_0",
              "summer-wheat_clover_winter-wheat": "4_0",
              "winter-wheat_clover_silage-corn": "5_0",
              "winter-wheat_sugar-beet_silage-corn": "6_0",
              "summer-wheat_winter-wheat_silage-corn": "7_0",
              "summer-wheat_winter-wheat_winter-rape": "8_0",
              "winter-wheat_winter-rape": "9_0",
              "winter-wheat_soybean_winter-rape": "10_0",
              "sugar-beet_winter-wheat_winter-barley": "11_0", 
              "grain-corn_winter-wheat_winter-rape": "12_0", 
              "grain-corn_winter-wheat_winter-barley": "13_0",
              "grain-corn_winter-wheat_clover": "14_0",
              "miscanthus": "15_0",
              "bare-grass": "16_0",
              "winter-wheat_silage-corn_yellow-mustard": "2_1",
              "summer-wheat_winter-wheat_yellow-mustard": "3_1",
              "winter-wheat_sugar-beet_silage-corn_yellow-mustard": "6_1",
              "summer-wheat_winter-wheat_silage-corn_yellow-mustard": "7_1",
              "summer-wheat_winter-wheat_winter-rape_yellow-mustard": "8_1",
              "sugar-beet_winter-wheat_winter-barley_yellow-mustard": "11_1", 
              "grain-corn_winter-wheat_winter-rape_yellow-mustard": "12_1", 
              "grain-corn_winter-wheat_winter-barley_yellow-mustard": "13_1", 
}

_ffids_mustard = ["2_0", "3_0", "6_0", "7_0", "8_0", "11_0", "12_0", "13_0",
                  "2_1", "3_1", "6_1", "7_1", "8_1", "11_1", "12_1", "13_1"]

_ffids_no_mustard = ["2_0", "3_0", "6_0", "7_0", "8_0", "11_0", "12_0", "13_0"]

_ffids_with_mustard = ["2_1", "3_1", "6_1", "7_1", "8_1", "11_1", "12_1", "13_1"]

_dict_intercropping_effects = {'low Nfert & no intercropping': 1.0,
                               'low Nfert & intercropping': 1.01,
                               'medium Nfert & no intercropping': 2.0,
                               'medium Nfert & intercropping': 2.01,
                               'high Nfert & no intercropping': 3,
                               'high Nfert & intercropping': 3.01
                               }

_dict_var_names = {"q_hof": "QSUR",
                   "ground_cover": "GC",
                   "M_q_ss": "MPERC",
                   "C_q_ss": "CPERC",
                   "q_ss": "PERC",
}

_dict_fert = {"low": 1,
              "medium": 2,
              "high": 3,
}

_dict_crop_id_rev = {115: "winter wheat",
                     425: "clover",
                     411: "silage corn",
                     116: "summer wheat",
                     603: "sugar beet",
                     311: "winter rape",
                     330: "soybean",
                     171: "grain corn",
                     131: "winter barley",
                    }

# identifiers for simulations
locations = ["freiburg", "lahr", "muellheim", 
             "stockach", "gottmadingen", "weingarten",
             "eppingen-elsenz", "bruchsal-heidelsheim", "bretten",
             "ehingen-kirchen", "merklingen", "hayingen",
             "kupferzell", "oehringen", "vellberg-kleinaltdorf"]

# locations = ["freiburg"]

_dict_location = {"freiburg": "Freiburg",
                  "lahr": "Lahr",
                  "muellheim": "Müllheim",
                  "stockach": "Stockach",
                  "gottmadingen": "Gottmadingen",
                  "weingarten": "Weingarten",
                  "eppingen-elsenz": "Eppingen",
                  "bruchsal-heidelsheim": "Bruchsal",
                  "bretten": "Bretten",
                  "ehingen-kirchen": "Ehingen",
                  "merklingen": "Merklingen",
                  "hayingen": "Hayingen",
                  "kupferzell": "Kupferzell",
                  "oehringen": "Öhringen",
                  "vellberg-kleinaltdorf": "Vellberg"}

crop_rotation_scenarios = ["winter-wheat_clover",
                           "winter-wheat_silage-corn",
                           "summer-wheat_winter-wheat",
                           "summer-wheat_clover_winter-wheat",
                           "winter-wheat_clover_silage-corn",
                           "winter-wheat_sugar-beet_silage-corn",
                           "summer-wheat_winter-wheat_silage-corn",
                           "summer-wheat_winter-wheat_winter-rape",
                           "winter-wheat_winter-rape",
                           "winter-wheat_soybean_winter-rape",
                           "sugar-beet_winter-wheat_winter-barley", 
                           "grain-corn_winter-wheat_winter-rape", 
                           "grain-corn_winter-wheat_winter-barley",
                           "grain-corn_winter-wheat_clover",
                           "miscanthus",
                           "bare-grass",
                           "winter-wheat_silage-corn_yellow-mustard",
                           "summer-wheat_winter-wheat_yellow-mustard",
                           "winter-wheat_sugar-beet_silage-corn_yellow-mustard",
                           "summer-wheat_winter-wheat_silage-corn_yellow-mustard",
                           "summer-wheat_winter-wheat_winter-rape_yellow-mustard",
                           "sugar-beet_winter-wheat_winter-barley_yellow-mustard", 
                           "grain-corn_winter-wheat_winter-rape_yellow-mustard", 
                           "grain-corn_winter-wheat_winter-barley_yellow-mustard"]

crop_rotation_scenarios_without_mustard = ["winter-wheat_silage-corn",
                                           "summer-wheat_winter-wheat",
                                           "winter-wheat_sugar-beet_silage-corn",
                                           "summer-wheat_winter-wheat_silage-corn",
                                           "summer-wheat_winter-wheat_winter-rape",
                                           "sugar-beet_winter-wheat_winter-barley", 
                                           "grain-corn_winter-wheat_winter-rape", 
                                           "grain-corn_winter-wheat_winter-barley"]

crop_rotation_scenarios_with_mustard = ["winter-wheat_silage-corn_yellow-mustard",
                                        "summer-wheat_winter-wheat_yellow-mustard",
                                        "winter-wheat_sugar-beet_silage-corn_yellow-mustard",
                                        "summer-wheat_winter-wheat_silage-corn_yellow-mustard",
                                        "summer-wheat_winter-wheat_winter-rape_yellow-mustard",
                                        "sugar-beet_winter-wheat_winter-barley_yellow-mustard", 
                                        "grain-corn_winter-wheat_winter-rape_yellow-mustard", 
                                        "grain-corn_winter-wheat_winter-barley_yellow-mustard"]

crop_rotation_scenarios_mustard = ["winter-wheat_silage-corn",
                                   "summer-wheat_winter-wheat",
                                   "winter-wheat_sugar-beet_silage-corn",
                                   "summer-wheat_winter-wheat_silage-corn",
                                   "summer-wheat_winter-wheat_winter-rape",
                                   "sugar-beet_winter-wheat_winter-barley", 
                                   "grain-corn_winter-wheat_winter-rape", 
                                   "grain-corn_winter-wheat_winter-barley",
                                   "winter-wheat_silage-corn_yellow-mustard",
                                   "summer-wheat_winter-wheat_yellow-mustard",
                                   "winter-wheat_sugar-beet_silage-corn_yellow-mustard",
                                   "summer-wheat_winter-wheat_silage-corn_yellow-mustard",
                                   "summer-wheat_winter-wheat_winter-rape_yellow-mustard",
                                   "sugar-beet_winter-wheat_winter-barley_yellow-mustard", 
                                   "grain-corn_winter-wheat_winter-rape_yellow-mustard", 
                                   "grain-corn_winter-wheat_winter-barley_yellow-mustard"]

fertilization_intensities = ["low", "medium", "high"]

_lab_unit_daily = {
    "M_q_ss": "PERC-$NO_3$\n [kg N/day/ha]",
    "C_q_ss": "PERC-$NO_3$\n [mg/l]"
}

_lab_unit_annual = {
    "M_q_ss": "PERC-$NO_3$-N\n [kg N/year/ha]",
    "C_q_ss": "PERC-$NO_3$\n [mg/l]",
    "q_ss": "PERC\n [mm/year]",
    "q_hof": "$Q_{sur}$\n [mm/year]",
}

_lab_unit_total = {
    "M_q_ss": "PERC-$NO_3$-N\n [kg N]",
    "C_q_ss": "PERC-$NO_3$\n [mg/l]"
}

# load model parameters
csv_file = base_path / "parameters.csv"
df_params = pd.read_csv(csv_file, sep=";", skiprows=1)
clust_ids = pd.unique(df_params["CLUST_ID"].values).tolist()

# # load linkage between BK50 and cropland clusters
# file = Path("/Volumes/LaCie/roger/examples/plot_scale/boadkh") / "link_shp_clust_acker.h5"
# df_link_bk50_cluster_cropland = pd.read_hdf(file)

# # load BK50 shapefile for Freiburg
# file = Path("/Volumes/LaCie/roger/examples/plot_scale/boadkh") / "BK50_acker_freiburg.gpkg"
# gdf_bk50 = gpd.read_file(file, include_fields=["SHP_ID", "area"]).loc[:, ["SHP_ID", "area"]]

# # get unique cluster ids for cropland
# cond = onp.isin(df_link_bk50_cluster_cropland.index.values, gdf_bk50["SHP_ID"].values)
# clust_ids = onp.unique(df_link_bk50_cluster_cropland.loc[cond, "CLUST_ID"].values).astype(str)

df_areas = pd.read_csv(base_path / "output" / "areas.csv", sep=";")

# load simulated fluxes and states
dict_fluxes_states = {}
for location in locations:
    dict_fluxes_states[location] = {}
    for crop_rotation_scenario in crop_rotation_scenarios:
        dict_fluxes_states[location][crop_rotation_scenario] = {}
        output_hm_file = (
            base_path_output
            / "svat_crop"
            / f"SVATCROP_{location}_{crop_rotation_scenario}.nc"
        )
        ds_fluxes_states = xr.open_dataset(output_hm_file, engine="h5netcdf")
        # assign date
        days = ds_fluxes_states["Time"].values / onp.timedelta64(24 * 60 * 60, "s")
        date = num2date(
            days,
            units=f"days since {ds_fluxes_states['Time'].attrs['time_origin']}",
            calendar="standard",
            only_use_cftime_datetimes=False,
        )
        ds_fluxes_states = ds_fluxes_states.assign_coords(Time=("Time", date))
        dict_fluxes_states[location][crop_rotation_scenario] = ds_fluxes_states

# file = base_path_output / "dict_fluxes_states.pickle"
# with open(file, 'wb') as handle:
#     pickle.dump(dict_fluxes_states, handle, protocol=pickle.HIGHEST_PROTOCOL)

# load nitrogen loads and concentrations
dict_nitrate = {}
for location in locations:
    dict_nitrate[location] = {}
    for crop_rotation_scenario in crop_rotation_scenarios:
        dict_nitrate[location][crop_rotation_scenario] = {}
        for fertilization_intensity in fertilization_intensities:
            dict_nitrate[location][crop_rotation_scenario][fertilization_intensity] = {}
            output_nitrate_file = (
                base_path_output
                / "svat_crop_nitrate"
                / f"SVATCROPNITRATE_{location}_{crop_rotation_scenario}_{fertilization_intensity}_Nfert.nc"
            )
            ds_nitrate = xr.open_dataset(output_nitrate_file, engine="h5netcdf")
            # assign date
            days = ds_nitrate["Time"].values / onp.timedelta64(24 * 60 * 60, "s")
            date = num2date(
                days,
                units=f"days since {ds_nitrate['Time'].attrs['time_origin']}",
                calendar="standard",
                only_use_cftime_datetimes=False,
            )
            ds_nitrate = ds_nitrate.assign_coords(Time=("Time", date))
            dict_nitrate[location][crop_rotation_scenario][f'{fertilization_intensity}_Nfert'] = ds_nitrate

# scatter plot
ll_df = []
for fertilization_intensity in fertilization_intensities:
    for location in locations:
        for crop_rotation_scenario in crop_rotation_scenarios:
            ds = dict_nitrate[location][crop_rotation_scenario][f'{fertilization_intensity}_Nfert'] 
            sim_vals = ds["M_q_ss"].isel(y=0).values[:, 1:-1] * 0.01 # convert from mg/m2 to kg/ha
            cond1 = (df_params["CLUST_flag"] == 1)
            df = pd.DataFrame(index=ds["Time"].values[1:-1], data=sim_vals.T).loc[:, cond1]
            # calculate annual sum
            df_ann_avg = df.resample("YE").sum().iloc[:-1, :].mean(axis=0).to_frame()

            ds = dict_fluxes_states[location][crop_rotation_scenario]
            sim_vals1 = ds["q_ss"].isel(y=0).values[:, 1:]
            ds = dict_nitrate[location][crop_rotation_scenario][f'{fertilization_intensity}_Nfert'] 
            sim_vals2 = ds["M_q_ss"].isel(y=0).values[:, 1:-1] * 4.427  # convert nitrate-nitrogen to nitrate
            sim_vals = onp.where(sim_vals1 > 0.01, (sim_vals2/sim_vals1) * (sim_vals1/onp.sum(sim_vals1, axis=-1)[:, onp.newaxis]), onp.nan)
            cond1 = (df_params["CLUST_flag"] == 1)
            df = pd.DataFrame(index=ds["Time"].values[1:-1], data=sim_vals.T).loc[:, cond1]
            # calculate annual mean
            df_avg = df.sum(axis=0).to_frame()
            df_ann_avg.loc[:, "C_q_ss"] = df_avg.values
            df_ann_avg.columns = ["M_q_ss", "C_q_ss"]

            cond1 = (df_params["CLUST_flag"] == 1)
            df = pd.DataFrame(index=ds["Time"].values[1:-1], data=sim_vals1.T).loc[:, cond1]
            # calculate annual sum
            df_ann_avg_perc = df.resample("YE").sum().iloc[:-1, :].mean(axis=0).to_frame()
            df_ann_avg.loc[:, "q_ss"] = df_ann_avg_perc.values
            params = ["z_soil", "theta_ac", "theta_ufc", "theta_pwp", "ks", "soil_fertility", "clay"]
            for param in params:
                df_ann_avg.loc[:, param] = df_params.loc[cond1, param].values

            df_ann_avg.loc[:, "fertilization_intensity"] = fertilization_intensity
            ll_df.append(df_ann_avg)
df_avg = pd.concat(ll_df)

# fig, axes = plt.subplots(1, 1, figsize=(3, 3))
# sns.scatterplot(df_avg, x="M_q_ss", y="C_q_ss", hue="fertilization_intensity", s=10, palette="RdPu", ax=axes)
# axes.set_ylabel("PERC-$NO_3$ [mg/l]")
# axes.set_xlabel("PERC-$NO_3$-N [kg N/year/ha]")
# axes.legend().set_visible(False)
# axes.set_ylim(0,)
# axes.set_xlim(0,)
# fig.tight_layout()
# file = base_path_figs / "scatter_nitrate.png"
# fig.savefig(file, dpi=300)
# plt.close(fig)

# fig, axes = plt.subplots(1, 3, figsize=(6, 3), sharex=True, sharey=True)
# cond = (df_avg["fertilization_intensity"] == "low")
# data = df_avg.loc[cond, :]
# sns.scatterplot(data, x="M_q_ss", y="C_q_ss", color='#fde0dd', s=10, ax=axes[0])
# cond = (df_avg["fertilization_intensity"] == "medium")
# data = df_avg.loc[cond, :]
# sns.scatterplot(data, x="M_q_ss", y="C_q_ss", color='#fa9fb5', s=10, ax=axes[1])
# cond = (df_avg["fertilization_intensity"] == "high")
# data = df_avg.loc[cond, :]
# sns.scatterplot(data, x="M_q_ss", y="C_q_ss", color='#c51b8a', s=10, ax=axes[2])
# axes[0].set_ylabel("PERC-$NO_3$ [mg/l]")
# axes[1].set_xlabel("PERC-$NO_3$-N [kg N/year/ha]")
# axes[0].legend().set_visible(False)
# axes[1].legend().set_visible(False)
# axes[2].legend().set_visible(False)
# axes[0].set_ylim(0,)
# axes[0].set_xlim(0,)
# axes[1].set_ylim(0,)
# axes[1].set_xlim(0,)
# axes[2].set_ylim(0,)
# axes[2].set_xlim(0,)
# fig.tight_layout()
# file = base_path_figs / "scatter_nitrate_fertilization_intensity.png"
# fig.savefig(file, dpi=300)
# plt.close(fig)

fig, axes = plt.subplots(1, 3, figsize=(6, 2.5), sharex=True, sharey=True)
cond = (df_avg["fertilization_intensity"] == "low")
data = df_avg.loc[cond, :]
axes[0].scatter(data["M_q_ss"], data["C_q_ss"], c=data["ks"], cmap="Blues", s=10, vmin=1, vmax=50)
cond = (df_avg["fertilization_intensity"] == "medium")
data = df_avg.loc[cond, :]
axes[1].scatter(data["M_q_ss"], data["C_q_ss"], c=data["ks"], cmap="Blues", s=10, vmin=1, vmax=50)
cond = (df_avg["fertilization_intensity"] == "high")
data = df_avg.loc[cond, :]
cb = axes[2].scatter(data["M_q_ss"], data["C_q_ss"], c=data["ks"], cmap="Blues", s=10, vmin=1, vmax=50)
axes[0].set_ylabel("PERC-$NO_3$ [mg/l]")
axes[1].set_xlabel("PERC-$NO_3$-N [kg N/year/ha]")
axes[0].set_ylim(0,)
axes[0].set_xlim(0,)
axes[1].set_ylim(0,)
axes[1].set_xlim(0,)
axes[2].set_ylim(0,)
axes[2].set_xlim(0,)
ax_divider = make_axes_locatable(axes[2])
# Add an Axes to the right of the main Axes.
cax = ax_divider.append_axes("right", size="5%", pad="5%")
cb1 = fig.colorbar(cb, cax=cax, label='$k_s$ [mm/hour]')
fig.tight_layout()
file = base_path_figs / "scatter_nitrate_fertilization_intensity_ks.png"
fig.savefig(file, dpi=300)
plt.close(fig)

# fig, axes = plt.subplots(1, 1, figsize=(3, 3))
# sns.scatterplot(df_avg, x="q_ss", y="C_q_ss", hue="fertilization_intensity", s=10, palette="RdPu", ax=axes)
# axes.set_ylabel("PERC-$NO_3$ [mg/l]")
# axes.set_xlabel("PERC [mm/year]")
# axes.legend().set_visible(False)
# axes.set_ylim(0,)
# axes.set_xlim(0,)
# fig.tight_layout()
# file = base_path_figs / "scatter_nitrate_perc.png"
# fig.savefig(file, dpi=300)
# plt.close(fig)

fig, axes = plt.subplots(1, 1, figsize=(4, 3))
cb = axes.scatter(df_avg["q_ss"].values, df_avg["C_q_ss"].values, c=df_avg["ks"].values, s=10, cmap="Blues", vmin=0, vmax=50)
fig.colorbar(cb, label='$k_s$ [mm/hour]', shrink=1)
axes.set_ylabel("PERC-$NO_3$ [mg/l]")
axes.set_xlabel("PERC [mm/year]")
axes.set_ylim(0,)
axes.set_xlim(0,)
fig.tight_layout()
file = base_path_figs / "scatter_nitrate_conc_perc_ks.png"
fig.savefig(file, dpi=300)
plt.close(fig)

fig, axes = plt.subplots(1, 1, figsize=(4, 3))
plt.scatter(df_avg["q_ss"].values, df_avg["C_q_ss"].values, c=df_avg["theta_ufc"].values, s=10, cmap="Blues", vmin=0.1, vmax=0.3)
plt.colorbar(label=r'$\theta_{ufc}$ [-]', shrink=1)
axes.set_ylabel("PERC-$NO_3$ [mg/l]")
axes.set_xlabel("PERC [mm/year]")
axes.set_ylim(0,)
axes.set_xlim(0,)
fig.tight_layout()
file = base_path_figs / "scatter_nitrate_conc_perc_fc.png"
fig.savefig(file, dpi=300)
plt.close(fig)

fig, axes = plt.subplots(1, 1, figsize=(4, 3))
plt.scatter(df_avg["q_ss"].values, df_avg["C_q_ss"].values, c=df_avg["z_soil"].values/1000, s=10, cmap="Blues", vmin=0.2, vmax=1.5)
plt.colorbar(label=r'soil depth [m]', shrink=1)
axes.set_ylabel("PERC-$NO_3$ [mg/l]")
axes.set_xlabel("PERC [mm/year]")
axes.set_ylim(0,)
axes.set_xlim(0,)
fig.tight_layout()
file = base_path_figs / "scatter_nitrate_conc_perc_soil_depth.png"
fig.savefig(file, dpi=300)
plt.close(fig)

fig, axes = plt.subplots(1, 1, figsize=(4, 3))
plt.scatter(df_avg["q_ss"].values, df_avg["M_q_ss"].values, c=df_avg["ks"].values, s=10, cmap="Blues", vmin=0, vmax=50)
plt.colorbar(label='$k_s$ [mm/hour]', shrink=1)
axes.set_ylabel("PERC-$NO_3$ [kg N ha/year]")
axes.set_xlabel("PERC [mm/year]")
axes.set_ylim(0,)
axes.set_xlim(0,)
fig.tight_layout()
file = base_path_figs / "scatter_nitrate_load_perc_ks.png"
fig.savefig(file, dpi=300)
plt.close(fig)

fig, axes = plt.subplots(1, 1, figsize=(4, 3))
plt.scatter(df_avg["q_ss"].values, df_avg["M_q_ss"].values, c=df_avg["theta_ufc"].values, s=10, cmap="Blues", vmin=0, vmax=50)
plt.colorbar(label=r'$\theta_{ufc}$ [-]', shrink=1)
axes.set_ylabel("PERC-$NO_3$ [kg N ha/year]")
axes.set_xlabel("PERC [mm/year]")
axes.set_ylim(0,)
axes.set_xlim(0,)
fig.tight_layout()
file = base_path_figs / "scatter_nitrate_load_perc_fc.png"
fig.savefig(file, dpi=300)
plt.close(fig)

fig, axes = plt.subplots(1, 1, figsize=(4, 3))
plt.scatter(df_avg["q_ss"].values, df_avg["M_q_ss"].values, c=df_avg["z_soil"].values/1000, s=10, cmap="Blues", vmin=0.2, vmax=1.5)
plt.colorbar(label=r'soil depth [m]', shrink=1)
axes.set_ylabel("PERC-$NO_3$ [kg N ha/year]")
axes.set_xlabel("PERC [mm/year]")
axes.set_ylim(0,)
axes.set_xlim(0,)
fig.tight_layout()
file = base_path_figs / "scatter_nitrate_load_perc_soil_depth.png"
fig.savefig(file, dpi=300)
plt.close(fig)


# fig, axes = plt.subplots(1, 3, figsize=(6, 3), sharex=True, sharey=True)
# cond = (df_avg["fertilization_intensity"] == "low")
# data = df_avg.loc[cond, :]
# sns.scatterplot(data, x="q_ss", y="C_q_ss", color='#fde0dd', s=10, ax=axes[0])
# cond = (df_avg["fertilization_intensity"] == "medium")
# data = df_avg.loc[cond, :]
# sns.scatterplot(data, x="q_ss", y="C_q_ss", color='#fa9fb5', s=10, ax=axes[1])
# cond = (df_avg["fertilization_intensity"] == "high")
# data = df_avg.loc[cond, :]
# sns.scatterplot(data, x="q_ss", y="C_q_ss", color='#c51b8a', s=10, ax=axes[2])
# axes[0].set_ylabel("PERC-$NO_3$ [mg/l]")
# axes[1].set_xlabel("PERC [mm/year]")
# axes[0].legend().set_visible(False)
# axes[1].legend().set_visible(False)
# axes[2].legend().set_visible(False)
# axes[0].set_ylim(0,)
# axes[0].set_xlim(0,)
# axes[1].set_ylim(0,)
# axes[1].set_xlim(0,)
# axes[2].set_ylim(0,)
# axes[2].set_xlim(0,)
# fig.tight_layout()
# file = base_path_figs / "scatter_nitrate_perc_fertilization_intensity.png"
# fig.savefig(file, dpi=300)
# plt.close(fig)

fig, axes = plt.subplots(1, 3, figsize=(6, 2.5), sharex=True, sharey=True)
cond = (df_avg["fertilization_intensity"] == "low")
data = df_avg.loc[cond, :]
axes[0].scatter(data["q_ss"], data["C_q_ss"], c=data["ks"], cmap="Blues", s=10, vmin=1, vmax=50)
cond = (df_avg["fertilization_intensity"] == "medium")
data = df_avg.loc[cond, :]
axes[1].scatter(data["q_ss"], data["C_q_ss"], c=data["ks"], cmap="Blues", s=10, vmin=1, vmax=50)
cond = (df_avg["fertilization_intensity"] == "high")
data = df_avg.loc[cond, :]
cb = axes[2].scatter(data["q_ss"], data["C_q_ss"], c=data["ks"], cmap="Blues", s=10, vmin=1, vmax=50)
axes[0].set_ylabel("PERC-$NO_3$ [mg/l]")
axes[1].set_xlabel("PERC [mm/year]")
axes[0].set_ylim(0,)
axes[0].set_xlim(0,)
axes[1].set_ylim(0,)
axes[1].set_xlim(0,)
axes[2].set_ylim(0,)
axes[2].set_xlim(0,)
ax_divider = make_axes_locatable(axes[2])
# Add an Axes to the right of the main Axes.
cax = ax_divider.append_axes("right", size="5%", pad="5%")
cb1 = fig.colorbar(cb, cax=cax, label='$k_s$ [mm/hour]')
fig.tight_layout()
file = base_path_figs / "scatter_nitrate_conc_perc_fertilization_intensity_ks.png"
fig.savefig(file, dpi=300)
plt.close(fig)

fig, axes = plt.subplots(1, 3, figsize=(6, 2.5), sharex=True, sharey=True)
cond = (df_avg["fertilization_intensity"] == "low")
data = df_avg.loc[cond, :]
axes[0].scatter(data["q_ss"], data["C_q_ss"], c=data["theta_ufc"], cmap="Blues", s=10, vmin=0.1, vmax=0.3)
cond = (df_avg["fertilization_intensity"] == "medium")
data = df_avg.loc[cond, :]
axes[1].scatter(data["q_ss"], data["C_q_ss"], c=data["theta_ufc"], cmap="Blues", s=10, vmin=0.1, vmax=0.3)
cond = (df_avg["fertilization_intensity"] == "high")
data = df_avg.loc[cond, :]
cb = axes[2].scatter(data["q_ss"], data["C_q_ss"], c=data["theta_ufc"], cmap="Blues", s=10, vmin=0.1, vmax=0.3)
axes[0].set_ylabel("PERC-$NO_3$ [mg/l]")
axes[1].set_xlabel("PERC [mm/year]")
axes[0].set_ylim(0,)
axes[0].set_xlim(0,)
axes[1].set_ylim(0,)
axes[1].set_xlim(0,)
axes[2].set_ylim(0,)
axes[2].set_xlim(0,)
ax_divider = make_axes_locatable(axes[2])
# Add an Axes to the right of the main Axes.
cax = ax_divider.append_axes("right", size="5%", pad="5%")
cb1 = fig.colorbar(cb, cax=cax, label=r'$\theta_{ufc}$ [-]')
fig.tight_layout()
file = base_path_figs / "scatter_nitrate_conc_perc_fertilization_intensity_fc.png"
fig.savefig(file, dpi=300)
plt.close(fig)

fig, axes = plt.subplots(1, 3, figsize=(6, 2.5), sharex=True, sharey=True)
cond = (df_avg["fertilization_intensity"] == "low")
data = df_avg.loc[cond, :]
axes[0].scatter(data["q_ss"], data["C_q_ss"], c=data["z_soil"]/1000, cmap="Blues", s=10, vmin=0.2, vmax=1.5)
cond = (df_avg["fertilization_intensity"] == "medium")
data = df_avg.loc[cond, :]
axes[1].scatter(data["q_ss"], data["C_q_ss"], c=data["z_soil"]/1000, cmap="Blues", s=10, vmin=0.2, vmax=1.5)
cond = (df_avg["fertilization_intensity"] == "high")
data = df_avg.loc[cond, :]
cb = axes[2].scatter(data["q_ss"], data["C_q_ss"], c=data["z_soil"]/1000, cmap="Blues", s=10, vmin=0.2, vmax=1.5)
axes[0].set_ylabel("PERC-$NO_3$ [mg/l]")
axes[1].set_xlabel("PERC [mm/year]")
axes[0].set_ylim(0,)
axes[0].set_xlim(0,)
axes[1].set_ylim(0,)
axes[1].set_xlim(0,)
axes[2].set_ylim(0,)
axes[2].set_xlim(0,)
ax_divider = make_axes_locatable(axes[2])
# Add an Axes to the right of the main Axes.
cax = ax_divider.append_axes("right", size="5%", pad="5%")
cb1 = fig.colorbar(cb, cax=cax, label=r'soil depth [m]')
fig.tight_layout()
file = base_path_figs / "scatter_nitrate_conc_perc_fertilization_intensity_soil_depth.png"
fig.savefig(file, dpi=300)
plt.close(fig)

fig, axes = plt.subplots(1, 3, figsize=(6, 2.5), sharex=True, sharey=True)
cond = (df_avg["fertilization_intensity"] == "low")
data = df_avg.loc[cond, :]
axes[0].scatter(data["q_ss"], data["M_q_ss"], c=data["ks"], cmap="Blues", s=10, vmin=1, vmax=50)
cond = (df_avg["fertilization_intensity"] == "medium")
data = df_avg.loc[cond, :]
axes[1].scatter(data["q_ss"], data["M_q_ss"], c=data["ks"], cmap="Blues", s=10, vmin=1, vmax=50)
cond = (df_avg["fertilization_intensity"] == "high")
data = df_avg.loc[cond, :]
cb = axes[2].scatter(data["q_ss"], data["M_q_ss"], c=data["ks"], cmap="Blues", s=10, vmin=1, vmax=50)
axes[0].set_ylabel("PERC-$NO_3$ [kg N ha/year]")
axes[1].set_xlabel("PERC [mm/year]")
axes[0].set_ylim(0,)
axes[0].set_xlim(0,)
axes[1].set_ylim(0,)
axes[1].set_xlim(0,)
axes[2].set_ylim(0,)
axes[2].set_xlim(0,)
ax_divider = make_axes_locatable(axes[2])
# Add an Axes to the right of the main Axes.
cax = ax_divider.append_axes("right", size="5%", pad="5%")
cb1 = fig.colorbar(cb, cax=cax, label='$k_s$ [mm/hour]')
fig.tight_layout()
file = base_path_figs / "scatter_nitrate_load_perc_fertilization_intensity_ks.png"
fig.savefig(file, dpi=300)
plt.close(fig)

fig, axes = plt.subplots(1, 3, figsize=(6, 2.5), sharex=True, sharey=True)
cond = (df_avg["fertilization_intensity"] == "low")
data = df_avg.loc[cond, :]
axes[0].scatter(data["q_ss"], data["M_q_ss"], c=data["theta_ufc"], cmap="Blues", s=10, vmin=0.1, vmax=0.3)
cond = (df_avg["fertilization_intensity"] == "medium")
data = df_avg.loc[cond, :]
axes[1].scatter(data["q_ss"], data["M_q_ss"], c=data["theta_ufc"], cmap="Blues", s=10, vmin=0.1, vmax=0.3)
cond = (df_avg["fertilization_intensity"] == "high")
data = df_avg.loc[cond, :]
cb = axes[2].scatter(data["q_ss"], data["M_q_ss"], c=data["theta_ufc"], cmap="Blues", s=10, vmin=0.1, vmax=0.3)
axes[0].set_ylabel("PERC-$NO_3$ [kg N ha/year]")
axes[1].set_xlabel("PERC [mm/year]")
axes[0].set_ylim(0,)
axes[0].set_xlim(0,)
axes[1].set_ylim(0,)
axes[1].set_xlim(0,)
axes[2].set_ylim(0,)
axes[2].set_xlim(0,)
ax_divider = make_axes_locatable(axes[2])
# Add an Axes to the right of the main Axes.
cax = ax_divider.append_axes("right", size="5%", pad="5%")
cb1 = fig.colorbar(cb, cax=cax, label=r'$\theta_{ufc}$ [-]')
fig.tight_layout()
file = base_path_figs / "scatter_nitrate_load_perc_fertilization_intensity_fc.png"
fig.savefig(file, dpi=300)
plt.close(fig)

fig, axes = plt.subplots(1, 3, figsize=(6, 2.5), sharex=True, sharey=True)
cond = (df_avg["fertilization_intensity"] == "low")
data = df_avg.loc[cond, :]
axes[0].scatter(data["q_ss"], data["M_q_ss"], c=data["z_soil"]/1000, cmap="Blues", s=10, vmin=0.2, vmax=1.5)
cond = (df_avg["fertilization_intensity"] == "medium")
data = df_avg.loc[cond, :]
axes[1].scatter(data["q_ss"], data["M_q_ss"], c=data["z_soil"]/1000, cmap="Blues", s=10, vmin=0.2, vmax=1.5)
cond = (df_avg["fertilization_intensity"] == "high")
data = df_avg.loc[cond, :]
cb = axes[2].scatter(data["q_ss"], data["M_q_ss"], c=data["z_soil"]/1000, cmap="Blues", s=10, vmin=0.2, vmax=1.5)
axes[0].set_ylabel("PERC-$NO_3$ [kg N ha/year]")
axes[1].set_xlabel("PERC [mm/year]")
axes[0].set_ylim(0,)
axes[0].set_xlim(0,)
axes[1].set_ylim(0,)
axes[1].set_xlim(0,)
axes[2].set_ylim(0,)
axes[2].set_xlim(0,)
ax_divider = make_axes_locatable(axes[2])
# Add an Axes to the right of the main Axes.
cax = ax_divider.append_axes("right", size="5%", pad="5%")
cb1 = fig.colorbar(cb, cax=cax, label=r'soil depth [m]')
fig.tight_layout()
file = base_path_figs / "scatter_nitrate_load_perc_fertilization_intensity_soil_depth.png"
fig.savefig(file, dpi=300)
plt.close(fig)